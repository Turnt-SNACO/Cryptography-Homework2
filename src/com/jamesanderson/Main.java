package com.jamesanderson;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Random;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

public class Main {
    public static void main(String[] args)
            throws NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
        boolean imageMode = false, stringMode = false, decryptMode = false, demoMode=false;
        String input = null, output = null, mode = null, key = null, iv = null;
        try {
            switch (args[0]) {
                case "-D":
                    demoMode = true;
                    break;
                case "-i":
                    imageMode = true;
                    input = args[1];
                    output = args[2];
                    for (String arg : args) {
                        switch (arg) {
                            case "-m":
                                mode = args[Arrays.asList(args).indexOf(arg) + 1];
                                break;
                            case "-k":
                                key = args[Arrays.asList(args).indexOf(arg) + 1];
                                break;
                            case "-iv":
                                iv = args[Arrays.asList(args).indexOf(arg) + 1];
                                break;
                            case "-d":
                                decryptMode = true;
                                break;
                        }
                    }
                    break;
                case "-s":
                    stringMode = true;
                    input = args[1];
                    for (String arg : args) {
                        switch (arg) {
                            case "-m":
                                mode = args[Arrays.asList(args).indexOf(arg) + 1];
                                break;
                            case "-k":
                                key = args[Arrays.asList(args).indexOf(arg) + 1];
                                break;
                            case "-iv":
                                iv = args[Arrays.asList(args).indexOf(arg) + 1];
                                break;
                            case "-o":
                                output = args[Arrays.asList(args).indexOf(arg) + 1];
                                break;
                            case "-d":
                                decryptMode = true;
                                break;
                        }
                    }
                    break;
                case "-h":
                    System.out.println("Valid execution arguments are:");
                    System.out.println("\t-t");
                    System.out.println("\t\tstarts a subshell where commands can be issued.");
                    System.out.println("\t-i input output [-m mode] [-k key] [-iv init_vector]");
                    System.out.println("\t\tinput: path to input image");
                    System.out.println("\t\toutput: path to output image");
                    System.out.println(
                            "\t\t-m: use to set AES mode of operation (ECB, CBC, CFB, OFB).  If unspecified will default to OFB");
                    System.out.println(
                            "\t\t-k: use to manualy set encryption key (128-bits).  If not used a key will be autogenerated printed to stdout.");
                    System.out.println(
                            "\t\t-iv: use to manually set initialization vector (128-bits). If not used an iv will be autogenerated printed to stdout.");
                    System.out.println("\t-s input [-o output] [-m mode] [-k key] [-iv init_vector]");
                    System.out.println("\t\tinput: String to be encrypted.");
                    System.out.println(
                            "\t\toutput: path to output file. Will write as txt.  If not used will print output to stdout.");
                    System.out.println(
                            "\t\t-m: use to set AES mode of operation (ECB, CBC, CFB, OFB).  If unspecified will default to OFB");
                    System.out.println(
                            "\t\t-k: use to manualy set encryption key (128-bits).  If not used a key will be autogenerated printed to stdout.");
                    System.out.println(
                            "\t\t-iv: use to manually set initialization vector (128-bits). If not used an iv will be autogenerated printed to stdout.");
                    System.out.println("\t Add -d flag to decrypt.");
                    break;
                default:
                    System.out.println("Invalid execution argument.");
                    System.out.println("Valid execution arguments are:");
                    System.out.println("\t-t");
                    System.out.println("\t-i input output [-m mode] [-k key] [-iv init_vector] [-d]");
                    System.out.println("\t-s input [-o output] [-m mode] [-k key] [-iv init_vector] [-d]");
                    break;
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Invalid arguments given.");
            System.out.println("Valid execution arguments are:");
            System.out.println("\t-t");
            System.out.println("\t-h");
            System.out.println("\t-i input [output] [-m mode] [-k key] [-iv init_vector]");
            System.out.println("\t-s input [output] [-m mode] [-k key] [-iv init_vector]");
            System.out.println("For more information use -h execution.");
        }
        byte[] byteKey, byteIV;
        Encryptor e;
        if (key == null) {
            Random r = new Random();
            byteKey = new byte[16];
            r.nextBytes(byteKey);
            key = new String(byteKey);
        } else {
            byteKey = new byte[16];
            char[] keyChars = key.toCharArray();
            for (int i = 0; i < 16; i++) {
                try {
                    byteKey[i] = (byte) keyChars[i];
                } catch (ArrayIndexOutOfBoundsException a) {
                    System.out.println("Invalid key size.  Use a 128-bit key (16 character).");
                    imageMode = false;
                    stringMode = false;
                }
            }
        }
        if (mode == null)
            mode = "OFB";
        if (iv == null) {
            byteIV = new byte[16];
            Random r = new Random();
            r.nextBytes(byteIV);
        } else {
            byteIV = new byte[16];
            char[] ivChars = iv.toCharArray();
            for (int i = 0; i < 16; i++) {
                try {
                    byteIV[i] = (byte) ivChars[i];
                } catch (ArrayIndexOutOfBoundsException a) {
                    System.out.println("Invalid iv size.  Use a 128-bit key (16 character).");
                    imageMode = false;
                    stringMode = false;
                }
            }
        }
        if (imageMode) {
            try {
                e = new Encryptor(mode, byteKey, byteIV);

                if (decryptMode) {
                    if (e.decryptImage(input, output)) {
                        System.out.println(
                                "Successfully decrypted " + input + " to " + output + " using " + mode + " mode.");
                        System.out.println("Key used: " + key);
                    }
                }

                else {
                    if (e.encryptImage(input, output)) {
                        System.out.println(
                                "Successfully encrypted " + input + " to " + output + " using " + mode + " mode.");
                        System.out.println("Key used: " + key);

                    }
                }

                if (mode.equals("CFB") || mode.equals("OFB")) {
                    System.out.println("IV used: " + iv);
                }

            } catch (NoSuchAlgorithmException n) {
                System.out.println("Invalid operation mode. Use ECB, CFB, CFB, or OFB.");
            } catch (InvalidKeyException i) {
                System.out.println("Invalid key!");
            }

        } else if (stringMode) {
            try {
                e = new Encryptor(mode, byteKey, byteIV);
                byte[] encrypted = e.encrypt(input.getBytes());
                if (output == null)
                    System.out.println(new String(encrypted));
                else {
                    FileOutputStream w = new FileOutputStream(output);
                    w.write(encrypted);
                    w.close();
                }
            } catch (NoSuchAlgorithmException n) {
                System.out.println("Invalid operation mode.  Use ECB, CFB, CFB, or OFB.");
            } catch (InvalidKeyException i) {
                System.out.println("Invalid key!");
            } catch (FileNotFoundException e1) { // nothing? } catch (IOException e1) {
                System.out.println("IO Error occured.");
            } catch (IOException e1) {
                System.out.println("Error writing to file!");
            }
        } else if (demoMode) {
            System.out.println("Starting demo mode...\n");
            byte[] bkey = "JAMESANDERSON123".getBytes();
            byte[] biv = "ANDERSON123JAMES".getBytes();
            System.out.println("Key set to JAMESANDERSON123 -> "+new String(bkey));
            System.out.println("IV set to ANDERSON123JAMES -> "+new String(biv)+"\n");
            Encryptor m;
            try {
                m = new Encryptor("ECB", bkey, biv);
                System.out.println("\tCalculating sum of letters in name modulo 26...");

                int sum = (int)'J'+(int)'A'+(int)'M'+(int)'E'+(int)'S'+(int)'A'+(int)'N'+(int)'D'+(int)'E'+(int)'R'+(int)'S'+(int)'O'+(int)'N'-(65*13);
                System.out.println("\tJ + A + M + E + S + A + N + D + E + R + S + O + N = "+sum);
                System.out.println("\t"+sum+" (mod 26): "+sum%26);
                System.out.println("\t"+sum%26+" -> rectangle.png");


                System.out.println();
                System.out.println("Image Tests:\n\tECB Op. Mode:");
                System.out.println("\t\tEncrypting rectangle.jpg -> retangle_enc.jpg");
                m.encryptImage("rectangle.jpg", "rectangle_ecb.jpg");
                System.out.println("\t\tEncrypting land1.jpg -> land1_ecb.jpg");
                m.encryptImage("land1.jpg", "land1_ecb.jpg");
                System.out.println("\t\tEncrypting land2.jpg -> land2_ecb.jpg");
                m.encryptImage("land2.jpg", "land2_ecb.jpg");
                System.out.println("\t\tEncrypting land3.jpg -> land3_ecb.jpg");
                m.encryptImage("land3.jpg", "land3_ecb.jpg");

                m = new Encryptor("CBC", bkey,biv);
                System.out.println("\tCBC Op. Mode:");
                System.out.println("\t\tEncrypting rectangle.jpg -> retangle_cbc.jpg");
                m.encryptImage("rectangle.jpg", "rectangle_cbc.jpg");
                System.out.println("\t\tEncrypting land1.jpg -> land1_cbc.jpg");
                m.encryptImage("land1.jpg", "land1_cbc.jpg");
                System.out.println("\t\tEncrypting land2.jpg -> land2_cbc.jpg");
                m.encryptImage("land2.jpg", "land2_cbc.jpg");
                System.out.println("\t\tEncrypting land3.jpg -> land3_cbc.jpg");
                m.encryptImage("land3.jpg", "land3_cbc.jpg");

                m = new Encryptor("CFB", bkey,biv);
                System.out.println("\tCFB Op. Mode:");
                System.out.println("\t\tEncrypting rectangle.jpg -> retangle_cfb.jpg");
                m.encryptImage("rectangle.jpg", "rectangle_cfb.jpg");
                System.out.println("\t\tEncrypting land1.jpg -> land1_cfb.jpg");
                m.encryptImage("land1.jpg", "land1_cfb.jpg");
                System.out.println("\t\tEncrypting land2.jpg -> land2_cfb.jpg");
                m.encryptImage("land2.jpg", "land2_cfb.jpg");
                System.out.println("\t\tEncrypting land3.jpg -> land3_cfb.jpg");
                m.encryptImage("land3.jpg", "land3_cfb.jpg");

                m = new Encryptor("OFB", bkey,biv);
                System.out.println("\tOFB Op. Mode:");
                System.out.println("\t\tEncrypting rectangle.jpg -> retangle_ofb.jpg");
                m.encryptImage("rectangle.jpg", "rectangle_ofb.jpg");
                System.out.println("\t\tEncrypting land1.jpg -> land1_ofb.jpg");
                m.encryptImage("land1.jpg", "land1_ofb.jpg");
                System.out.println("\t\tEncrypting land2.jpg -> land2_ofb.jpg");
                m.encryptImage("land2.jpg", "land2_ofb.jpg");
                System.out.println("\t\tEncrypting land3.jpg -> land3_ofb.jpg\n");
                m.encryptImage("land3.jpg", "land3_ofb.jpg");
                System.out.println("\nObservations: ECB mode does not completely conceal information.  \n\tUnlike CBC, CFB, and OFB, general patterns from the original \n\timage are still distinguishable after encryption.");

				System.out.println("\nError Propagation Tests:");
	            System.out.println("\tECB Mode:");
                m = new Encryptor("ECB",bkey,biv);
                System.out.println();
                byte[] data = "The quick brown fox jumps over the lazy dog".getBytes();
                System.out.println("\tInitial Data: "+new String(data));
                byte[] encrypted = m.encrypt(data);
                System.out.println("\tEncrypted Data: "+new String(encrypted));
                byte[] decrypted = m.decrypt(encrypted);
                System.out.println("\tDecrypted Data: "+new String(decrypted).substring(0, decrypted.length-m.getPostfix()-1));

				/* TODO: Insert corruption test in plaintext, and ciphertext for all 4 modes*/

            }


            catch (InvalidKeyException | NoSuchAlgorithmException e1) {
                System.out.println("Error initializing Encryptor");
            }

        } else {
            System.out.println("Unexpected error occurred: Could not discern execution mode.");
        }

    }
}
